name: Continuous Integration

on:
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    name: Continuous Integration
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        ruby: [ "2.6", "2.7", "3.0" ]

    container:
      image: ruby:${{ matrix.ruby }}-alpine

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: postgres
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          apk add build-base cmake git postgresql-dev tar

      - name: Cache Gems
        uses: actions/cache@v2.1.3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-

      - name: Install Gems
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Prepare database
        run: |
          bundle exec rake db:create
          bundle exec rake db:schema:load
        env:
          PG_HOST: postgres
          PG_USER: postgres
          PG_PASSWORD: postgres
          PG_DATABASE: musicbrainz

      - name: Test
        run: bundle exec rspec --profile 10 --format progress
        env:
          PG_HOST: postgres
          PG_USER: postgres
          PG_PASSWORD: postgres
          PG_DATABASE: musicbrainz

      - name: Lint
        run: bundle exec rubocop --config .rubocop.yml --parallel --display-cop-names

  release:
    name: Release application
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Build and push to RubyGems
        uses: cadwallion/publish-rubygems-action@master
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          RUBYGEMS_API_KEY: ${{secrets.RUBYGEMS_API_KEY}}
          RELEASE_COMMAND: rake release

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Gem ${{ github.event.repository.name }} ${{ env.VERSION }} was released
