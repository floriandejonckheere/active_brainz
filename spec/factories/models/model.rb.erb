# frozen_string_literal: true

FactoryBot.define do
  factory :<%= name %>, class: "ActiveBrainz::<%= class_name %>" do
    <%- Array(primary_key).reject { |p| p == "id"}.each do |key| -%>
    sequence(:<%= key %>)
    <%- end -%>
    <%- if gid? -%>
    gid { FFaker::Guid.guid }
    <%- end -%>
    <%- if filtered_references.any? -%>

    <%- filtered_references.select { |ref| ref.type == :belongs_to }.each do |ref| -%>
    <%= ref.enabled ? nil : "# " %>association :<%= ref.name %>, factory: :<%= ref.to_table %>
    <%- end -%>
    <%- end -%>
    <%- if filtered_attributes.any? -%>

    <%- filtered_attributes.each do |attr| -%>
    <%= attr.name %> { <%= attr.ffaked_value %> }
    <%- end -%>
    <%- if begin_end_date? %>

    transient do
      begin_date { [FFaker::Time.date, nil].sample }
    end

    begin_date_year { begin_date&.year }
    begin_date_month { begin_date&.month }
    begin_date_day { begin_date&.day }

    transient do
      end_date { [FFaker::Time.date, nil].sample }
    end

    end_date_year { end_date&.year }
    end_date_month { end_date&.month }
    end_date_day { end_date&.day }

    ended { end_date.present? }
    <%- end -%>
    <%- end -%>
    <%- if child_order? -%>

    sequence(:child_order)
    <%- end -%>
    <%- filtered_references.select { |ref| ref.type == :has_many }.each do |ref| %>
    <%= ref.enabled ? nil : "# " %>trait :with_<%= ref.to_table.pluralize %> do
    <%= ref.enabled ? nil : "# " %>  <%= ref.name %> { build_list(:<%= ref.to_table %>, 3) }
    <%= ref.enabled ? nil : "# " %>end
    <%- end -%>
    <%- if child_order? -%>

    trait :with_parent do
      parent { build(:<%= table_name %>) }
    end

    trait :with_children do
      children { build_list(:<%= table_name %>, 3) }
    end
    <%- end -%>
  end
end
